<div class="inline-feedback bg-white px-4">
    <div class="inline-feedback-wrapper mx-auto my-0">
        <div class="inline-feedback-prompt px-4">
            {% block outerTitle %}
            <a class="open" href="#">{{ __("inline-feedback.footer-expand-link") }}</a>
            <span class="confirmation hidden">Thank you for your feedback</span>
            {% endblock %}
        </div>
        <div class="hidden inner-div">
            <div class="sm:flex">
                <div class="flex-none pt-6 text-right w-full sm:w-auto">
                    <a class="close text-lg" href="#">{{ __("inline-feedback.close") }}</a>
                </div>
                {% block innerTitle %}
                <h1 class="order-first flex-grow">{{ __("inline-feedback.title") }}</h1>
                {% endblock %}
            </div>
            {% block topMatter %}
            <p class="mt-8 text-xl">{{ __("inline-feedback.contact-1") }}</p>
            <p class="mt-1 mb-10 text-xl">{{ __("inline-feedback.contact-2") }}</p>
            {% endblock %}
            {% block questions %}
            <form>
                <input type="hidden" name="_csrf" value="{{ csrfToken }}">

                {{ checkBoxes('feedback_type', 
                    {
                        '1':"Incorrect or confusing information on this page",
                        '2':"This page does not work with your screen reader or other adaptive technology",
                        '3':"You could not complete [product-specific service/task]",
                        '4':"[product specific issue e.g.: “You’re missing documents”]",
                        '5':"You’re worried about your privacy",
                        '6':"Other"

                    }, 
                    data.feedback_type, 
                    'form.midservice_feedback.type', 
                    errors)
                }}
                {{ textArea('feedback_text', 'form.midservice_feedback.text', { hint: 'form.midservice_feedback.text.hint' }) }}
                <button type="submit" class="w-auto mb-10">{{ __("inline-feedback.submit") }} &#8594;</button>
            </form>
            {% endblock %}
        </div>
    </div>
</div>

<script>
    window.addEventListener("load", function () {
        const fbkEl = document.querySelector('.inline-feedback'),
        fbkOpenEl = fbkEl.querySelector('a.open'),
        fbkCloseEl = fbkEl.querySelector('a.close'),
        fbkFormEl = fbkEl.querySelector('form'),
        fbkElClasses = fbkEl.classList,
        fbkOpenClass = 'expanded';
        // show component 
        fbkOpenEl.addEventListener("click", function(e) {
            e.preventDefault();
            fbkElClasses.add(fbkOpenClass);
            return false;
        });
        // hide component 
        fbkCloseEl.addEventListener("click", function(e) {
            e.preventDefault();
            fbkElClasses.remove(fbkOpenClass);
            return false;
        });
        // post form data asynchronously 
        async function sendFeedback(form) {
            let endPoint, // = "https://cds-feedback-collector.herokuapp.com/en/send?id=",
            response;
            
            const inlineFeedbackConfirmationEl = fbkEl.querySelector('.confirmation'),
            formData = new FormData(form),
            jsonFormData = JSON.stringify(Object.fromEntries(formData)),
            mockResponseHeaders = { "status" : 299, "statusText" : "No endpoint configured" },
            mockResponse = new Response(null, mockResponseHeaders);
            if (endPoint === undefined) {
                response = mockResponse;
            } else {
                response = await fetch(endPoint, {
                    mode: 'cors', 
                    method: 'POST',
                    body: jsonFormData,
                    headers: {
                        'Content-Type': 'application/json'
                    }
                }); 
            }
            const responseStatusCode = await response.status;
            
            if (response.ok) {
                fbkCloseEl.click();
                fbkOpenEl.classList.add('hidden');
                inlineFeedbackConfirmationEl.classList.remove('hidden');
                if (responseStatusCode === 299) {
                    console.warn("Feedback post response status " + responseStatusCode + ": " + response.statusText); 
                }
            } else {
                // form error messages 
                console.log("Feedback post response status " + responseStatusCode + ": " + response.statusText)
            }
        };
        fbkFormEl.addEventListener("submit", function(e) {
            e.preventDefault();
            sendFeedback(this);
            return false;
        });
    });
</script>